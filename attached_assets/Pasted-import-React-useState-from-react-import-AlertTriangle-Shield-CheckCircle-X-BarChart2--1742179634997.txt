import React, { useState } from 'react';
import { AlertTriangle, Shield, CheckCircle, X, BarChart2, FileText, Settings, Users, Bell, Upload, RefreshCw } from 'lucide-react';

// メインアプリケーション
const AppSafeguard = () => {
  const [activeTab, setActiveTab] = useState('dashboard');
  const [scanStatus, setScanStatus] = useState('complete'); // 'idle', 'scanning', 'complete'
  const [appType, setAppType] = useState('web');
  const [showGuide, setShowGuide] = useState(false);

  return (
    <div className="flex h-screen bg-gray-100">
      {/* サイドナビゲーション */}
      <div className="w-64 bg-slate-800 text-white p-4">
        <div className="flex items-center mb-8">
          <Shield className="h-8 w-8 text-blue-400" />
          <h1 className="ml-2 text-xl font-bold">AppSafeguard</h1>
        </div>
        
        <nav>
          <ul>
            <li className={`mb-2 p-2 rounded ${activeTab === 'dashboard' ? 'bg-blue-600' : 'hover:bg-slate-700'}`}
                onClick={() => setActiveTab('dashboard')}>
              <button className="flex items-center w-full text-left">
                <BarChart2 className="mr-2 h-5 w-5" />
                <span>ダッシュボード</span>
              </button>
            </li>
            <li className={`mb-2 p-2 rounded ${activeTab === 'scans' ? 'bg-blue-600' : 'hover:bg-slate-700'}`}
                onClick={() => setActiveTab('scans')}>
              <button className="flex items-center w-full text-left">
                <Shield className="mr-2 h-5 w-5" />
                <span>スキャン管理</span>
              </button>
            </li>
            <li className={`mb-2 p-2 rounded ${activeTab === 'reports' ? 'bg-blue-600' : 'hover:bg-slate-700'}`}
                onClick={() => setActiveTab('reports')}>
              <button className="flex items-center w-full text-left">
                <FileText className="mr-2 h-5 w-5" />
                <span>レポート</span>
              </button>
            </li>
            <li className={`mb-2 p-2 rounded ${activeTab === 'users' ? 'bg-blue-600' : 'hover:bg-slate-700'}`}
                onClick={() => setActiveTab('users')}>
              <button className="flex items-center w-full text-left">
                <Users className="mr-2 h-5 w-5" />
                <span>ユーザー管理</span>
              </button>
            </li>
            <li className={`mb-2 p-2 rounded ${activeTab === 'settings' ? 'bg-blue-600' : 'hover:bg-slate-700'}`}
                onClick={() => setActiveTab('settings')}>
              <button className="flex items-center w-full text-left">
                <Settings className="mr-2 h-5 w-5" />
                <span>設定</span>
              </button>
            </li>
          </ul>
        </nav>
      </div>

      {/* メインコンテンツエリア */}
      <div className="flex-1 overflow-auto">
        {/* ヘッダー */}
        <header className="bg-white p-4 shadow flex justify-between items-center">
          <h2 className="text-xl font-semibold">
            {activeTab === 'dashboard' && 'セキュリティダッシュボード'}
            {activeTab === 'scans' && 'スキャン管理'}
            {activeTab === 'reports' && 'レポート'}
            {activeTab === 'users' && 'ユーザー管理'}
            {activeTab === 'settings' && '設定'}
          </h2>
          <div className="flex items-center">
            <button className="p-2 mr-2 text-gray-500 hover:text-gray-700">
              <Bell className="h-5 w-5" />
            </button>
            <div className="flex items-center">
              <div className="h-8 w-8 rounded-full bg-blue-500 flex items-center justify-center text-white">
                YT
              </div>
              <span className="ml-2">山田 太郎</span>
            </div>
          </div>
        </header>

        {/* ダッシュボードコンテンツ */}
        {activeTab === 'dashboard' && (
          <div className="p-6">
            {/* スコアカード */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
              <div className="bg-white p-6 rounded-lg shadow">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-500">リスクスコア</p>
                    <p className="text-2xl font-bold">76/100</p>
                  </div>
                  <div className="p-3 bg-yellow-100 rounded-full">
                    <AlertTriangle className="h-6 w-6 text-yellow-600" />
                  </div>
                </div>
                <p className="mt-2 text-sm text-gray-500">中程度のリスクがあります</p>
              </div>
              
              <div className="bg-white p-6 rounded-lg shadow">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-500">検出された脆弱性</p>
                    <p className="text-2xl font-bold">7</p>
                  </div>
                  <div className="p-3 bg-red-100 rounded-full">
                    <AlertTriangle className="h-6 w-6 text-red-600" />
                  </div>
                </div>
                <p className="mt-2 text-sm text-gray-500">高: 2 | 中: 3 | 低: 2</p>
              </div>
              
              <div className="bg-white p-6 rounded-lg shadow">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-500">最終スキャン</p>
                    <p className="text-2xl font-bold">今日</p>
                  </div>
                  <div className="p-3 bg-blue-100 rounded-full">
                    <RefreshCw className="h-6 w-6 text-blue-600" />
                  </div>
                </div>
                <p className="mt-2 text-sm text-gray-500">2025年3月17日 10:45</p>
              </div>
            </div>

            {/* グラフとリスク詳細 */}
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              {/* リスク詳細 */}
              <div className="lg:col-span-2 bg-white p-6 rounded-lg shadow">
                <h3 className="text-lg font-semibold mb-4">検出されたリスク</h3>

                <div className="mb-4 border-l-4 border-red-500 p-4 bg-red-50 rounded">
                  <div className="flex justify-between">
                    <h4 className="font-semibold text-red-700">SQLインジェクション脆弱性</h4>
                    <span className="px-2 py-1 text-xs text-white bg-red-500 rounded">高</span>
                  </div>
                  <p className="text-sm text-gray-600 mt-1">検出場所: /api/users/search</p>
                  <p className="text-sm mt-2">ユーザー入力がSQL文に直接組み込まれており、攻撃者によるデータベースの不正アクセスの可能性があります。</p>
                  <button 
                    className="text-sm text-blue-600 mt-2 hover:underline"
                    onClick={() => setShowGuide(true)}
                  >
                    修正ガイドを表示
                  </button>
                </div>

                <div className="mb-4 border-l-4 border-red-500 p-4 bg-red-50 rounded">
                  <div className="flex justify-between">
                    <h4 className="font-semibold text-red-700">認証機構の脆弱性</h4>
                    <span className="px-2 py-1 text-xs text-white bg-red-500 rounded">高</span>
                  </div>
                  <p className="text-sm text-gray-600 mt-1">検出場所: /login</p>
                  <p className="text-sm mt-2">パスワードがプレーンテキストで送信されています。セッション管理に問題があり、ハイジャックの危険性があります。</p>
                  <button className="text-sm text-blue-600 mt-2 hover:underline">修正ガイドを表示</button>
                </div>

                <div className="mb-4 border-l-4 border-yellow-500 p-4 bg-yellow-50 rounded">
                  <div className="flex justify-between">
                    <h4 className="font-semibold text-yellow-700">クロスサイトスクリプティング(XSS)</h4>
                    <span className="px-2 py-1 text-xs text-white bg-yellow-500 rounded">中</span>
                  </div>
                  <p className="text-sm text-gray-600 mt-1">検出場所: /comments</p>
                  <p className="text-sm mt-2">ユーザー入力が適切にサニタイズされておらず、スクリプトが実行される可能性があります。</p>
                  <button className="text-sm text-blue-600 mt-2 hover:underline">修正ガイドを表示</button>
                </div>

                <button className="text-blue-600 text-sm hover:underline">すべてのリスクを表示</button>
              </div>

              {/* 新しいスキャン開始 */}
              <div className="bg-white p-6 rounded-lg shadow">
                <h3 className="text-lg font-semibold mb-4">新しいスキャンを開始</h3>
                
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700 mb-1">アプリケーションタイプ</label>
                  <div className="flex">
                    <button
                      className={`flex-1 py-2 px-4 text-center ${appType === 'web' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700'} rounded-l`}
                      onClick={() => setAppType('web')}
                    >
                      Webアプリ
                    </button>
                    <button
                      className={`flex-1 py-2 px-4 text-center ${appType === 'native' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700'} rounded-r`}
                      onClick={() => setAppType('native')}
                    >
                      ネイティブアプリ
                    </button>
                  </div>
                </div>
                
                {appType === 'web' ? (
                  <div className="mb-4">
                    <label className="block text-sm font-medium text-gray-700 mb-1">アプリケーションURL</label>
                    <input type="text" placeholder="https://example.com" className="w-full p-2 border rounded focus:ring-blue-500 focus:border-blue-500" />
                  </div>
                ) : (
                  <div className="mb-4">
                    <label className="block text-sm font-medium text-gray-700 mb-1">アプリケーションファイル</label>
                    <div className="border-2 border-dashed border-gray-300 rounded p-6 text-center cursor-pointer hover:bg-gray-50">
                      <Upload className="mx-auto h-12 w-12 text-gray-400" />
                      <p className="mt-1 text-sm text-gray-500">
                        APK/IPAファイルをドラッグ&ドロップするか、クリックしてアップロード
                      </p>
                      <input type="file" className="hidden" />
                    </div>
                  </div>
                )}
                
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700 mb-1">スキャンタイプ</label>
                  <select className="w-full p-2 border rounded focus:ring-blue-500 focus:border-blue-500">
                    <option>総合的なセキュリティチェック</option>
                    <option>認証・認可チェック</option>
                    <option>データ処理セキュリティチェック</option>
                    <option>通信セキュリティチェック</option>
                  </select>
                </div>
                
                <button className="w-full bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700">
                  スキャンを開始
                </button>
              </div>
            </div>
          </div>
        )}

        {/* 修正ガイドモーダル */}
        {showGuide && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4">
            <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-screen overflow-auto">
              <div className="flex justify-between items-center p-6 border-b">
                <h3 className="text-lg font-semibold">SQLインジェクション脆弱性 - 修正ガイド</h3>
                <button onClick={() => setShowGuide(false)}>
                  <X className="h-5 w-5" />
                </button>
              </div>
              <div className="p-6">
                <div className="mb-4">
                  <h4 className="font-semibold mb-2">脆弱性の説明</h4>
                  <p className="text-sm text-gray-600">
                    SQLインジェクションは、攻撃者がSQLクエリの構造を操作して、データベースに対して意図しないコマンドを実行できる脆弱性です。
                    これにより、データベースの内容の閲覧、変更、削除などが行われる可能性があります。
                  </p>
                </div>
                
                <div className="mb-4">
                  <h4 className="font-semibold mb-2">検出された問題のコード</h4>
                  <div className="bg-gray-100 p-3 rounded font-mono text-sm">
                    <code>
                      const query = `SELECT * FROM users WHERE username = '${userInput}'`;<br/>
                      const results = await db.execute(query);
                    </code>
                  </div>
                </div>
                
                <div className="mb-4">
                  <h4 className="font-semibold mb-2">修正方法</h4>
                  <p className="text-sm text-gray-600 mb-2">
                    パラメータ化されたクエリを使用して、ユーザー入力とSQLの構文を分離します。
                  </p>
                  <div className="bg-green-50 p-3 rounded font-mono text-sm border-l-4 border-green-500">
                    <code>
                      const query = `SELECT * FROM users WHERE username = ?`;<br/>
                      const results = await db.execute(query, [userInput]);
                    </code>
                  </div>
                </div>
                
                <div>
                  <h4 className="font-semibold mb-2">その他の対策</h4>
                  <ul className="list-disc list-inside text-sm text-gray-600">
                    <li>ORM（オブジェクト・リレーショナル・マッピング）ライブラリを使用する</li>
                    <li>最小権限の原則に基づいてデータベースユーザーのアクセス権を制限する</li>
                    <li>ユーザー入力のバリデーションを実装する</li>
                    <li>エラーメッセージでデータベース情報を漏らさない</li>
                  </ul>
                </div>
              </div>
              <div className="p-6 border-t bg-gray-50 flex justify-end">
                <button className="bg-gray-300 text-gray-700 py-2 px-4 rounded mr-2 hover:bg-gray-400" onClick={() => setShowGuide(false)}>
                  閉じる
                </button>
                <button className="bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700">
                  詳細なドキュメントを表示
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default AppSafeguard;